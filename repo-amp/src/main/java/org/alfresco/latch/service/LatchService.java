package org.alfresco.latch.service;

import org.alfresco.latch.config.LatchConfig;
import org.alfresco.latch.exception.LatchException;
import org.alfresco.service.cmr.repository.NodeRef;

import com.elevenpaths.latch.LatchResponse;
import com.google.gson.JsonObject;

/**
 * 
 * @author iarroyo
 *
 * @mail iarroyoescobar@gmail.com
 *
 */
public interface LatchService {
	
	public static final String OPERATIONS="operations";
	public static final String STATUS="status";
	public static final String TWO_FACTOR="two_factor";
	public static final String STATUS_ON="ON";
	
	/**
	 * Get the latch configuration
	 * 
	 * @return
	 */
	public LatchConfig getLatchConfig();
	
	/**
	 * Get the accountID for the give username
	 * 
	 * @param userName
	 * @return
	 */
	public String getAccountID(String userName);

	/**
	 * Get the accountID for the fiven nodeRef
	 * 
	 * @param userRef
	 * @return
	 */
	public String getAccountID(NodeRef userRef);
	
	/**
	 * Get the latch status by the accountID
	 * 
	 * @param accountID
	 * @return
	 */
	public LatchResponse getLatchStatus(String accountID);
	
	/**
	 * Get the latch status skipping the 2FA by the accountID
	 * 
	 * @param accountID
	 * @return
	 */
	public LatchResponse getLatchStatusNOOtp(String accountID);
	
	/**
	 * Pair the user account with the latch service
	 * 
	 * @param userName
	 * @param token
	 * @throws LatchErrorException
	 */
	public void pairAccount(String userName, String token) throws LatchException;
	
	/**
	 * Unpair the user account with the latch service
	 * @param userName
	 * @throws LatchErrorException
	 */
	public void unpairAccount(String userName) throws LatchException;
	
	/**
	 * 
	 * @param userName
	 */
	public void externallyUnpairedAccount(String userName);
	
	/**
	 * Check if the latch is open or close.
	 * 
	 * @param latchResponse
	 * @return
	 */
	public Boolean isLatchON(LatchResponse latchResponse);

	/**
	 * Check if the second factor authentication is enabled.
	 * 
	 * @param latchResponse
	 * @return
	 */
	public JsonObject isTwoFAEnabled(LatchResponse latchResponse);
	
	/**
	 * Check if the user cache contains the generated token by the latch service.
	 * 
	 * @param username
	 * @return
	 */
	public Boolean twoFACacheHasUserToken(String username);
	
	/**
	 * Check if the user cache contains the token setted by the user.
	 * 
	 * @param username
	 * @return
	 */
	public Boolean twoFACacheHasTemporalToken(String username);
	
	/**
	 * Update the user-token setted by the user.
	 * 
	 * @param username
	 * @param token
	 */
	public void updateTemporalUserToken(String username, String token);
	
	/**
	 * Update the user-token generated by the latch service.
	 * 
	 * @param username
	 * @param token
	 */
	public void updateLatchUserToken(String username, String token);
	
	/**
	 * Check if the 2FA has been correct.
	 * 
	 * @param username
	 * @return
	 */
	public Boolean checkTwoFATokens(String username);
	
	/**
	 * Remove the 2FA configuration from the cache.
	 * @param username
	 */
	public void removeTwoFAConfig(String username);

	/**
	 * Check if the request is valid.
	 * This trick is used to filter the requests and only process the
	 * request that we need. It is used to call 2FA in the correct request.
	 * It is due to the same web script to login is called by other requests
	 * different to the share login request.
	 * 
	 * @param username
	 * @return
	 */
	public boolean isValidRequest(String username);

	/**
	 * Set the referer of the request. It is a kind of watermark.
	 * @param userName
	 * @param referer
	 */
	public void putRefererRequest(String userName, String referer);

}
